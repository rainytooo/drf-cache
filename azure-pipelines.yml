# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master


stages:
  - stage: TestingStage
    displayName: Testing Project Stage  # friendly name to display in the UI
    # dependsOn: string | [ string ]
    # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - job: Unit_Test
        # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
        displayName: Run Unit Test
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          matrix:
            Python35:
              PYTHON_VERSION: '3.5'
            Python36:
              PYTHON_VERSION: '3.6'
            Python37:
              PYTHON_VERSION: '3.7'
          maxParallel: 3
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(PYTHON_VERSION)'
            architecture: 'x64'
        - script: |
            python -m pip install --upgrade pip setuptools wheel
            sudo apt-get install redis-server
            sudo service redis restart
            pip install tox
            pip install unittest-xml-reporting
          displayName: 'Install prerequisites'
        - script: tox
          displayName: 'Run Tox'
        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testResultsFiles: '**/TEST-*.xml'
            testRunTitle: 'Publish test results for Python $(python.version)'
        - task: PublishCodeCoverageResults@1
          inputs:
            #codeCoverageTool: 'JaCoCo' # Options: cobertura, jaCoCo
            summaryFileLocation: $(Build.SourcesDirectory)/coverage.xml

  - stage: BuildingStage
    displayName: Build And Publish Stage
    jobs:
      - job: Package_Project
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: Package The Project
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          matrix:
            Python37:
              PYTHON_VERSION: '3.7'
          maxParallel: 3
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(PYTHON_VERSION)'
              architecture: 'x64'
          - script: |
              python -m pip install --upgrade pip setuptools wheel twine
            displayName: 'Install prerequisites'
          - task: DownloadSecureFile@1
            name: downloadPypircFile
            displayName: 'Download Pypirc File'
            inputs:
              secureFile: 'pypirc'
          - script: |
              sudo cp -rv $(downloadPypircFile.secureFilePath) ~/.pypirc
              ls -alsh ~/.pypirc
            name: InitPypircFile
            displayName: 'Init Pypirc File for Build'
          - script: |
              python setup.py sdist bdist_wheel
            name: Packaging
            displayName: 'Packaging'
          - script: |
              twine upload dist/*
            name: Uploading
            displayName: 'Uploading'
